buildscript {
	repositories {
		gradlePluginPortal()
	}
	dependencies {
	// using jpackage only works if the JDK version is 14 or higher.
	// your JAVA_HOME environment variable may also need to be a JDK with version 14 or higher.
		if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_14)) {
			classpath "org.beryx:badass-runtime-plugin:1.12.7"
		}
	}
}
/*
if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_14)) {
	apply plugin: 'org.beryx.runtime'
}
else {
	apply plugin: 'application'
}
*/
version = '0.1.0'

allprojects {
	apply plugin: 'eclipse'
	apply plugin: 'idea'
	apply plugin: 'java-library'

	ext.appName = 'yokel-towers'
	repositories {
		mavenCentral()
		maven { url 'https://s01.oss.sonatype.org' }
		mavenLocal()
		gradlePluginPortal()
		maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
		maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
		maven { url 'https://jitpack.io' }
	}

	//apply plugin: 'io.freefair.lombok'
	sourceCompatibility = 1.8
	compileJava {
		options.incremental = true
	}
	dependencies {
		// This follows advice from https://blog.gradle.org/log4j-vulnerability
		constraints {
			implementation("org.apache.logging.log4j:log4j-core") {
				version {
					strictly("[2.18, 3[")
					prefer("2.18.0")
				}
				because("CVE-2021-44228, CVE-2021-45046, CVE-2021-45105: Log4j vulnerable to remote code execution and other critical security vulnerabilities")
			}
		}
	}
}

sourceSets.main.resources.srcDirs += [ rootProject.file('assets').path ]
//mainClassName = 'net.games.client.lwjgl3.Lwjgl3Launcher'
eclipse.project.name = appName + version
sourceCompatibility = 1.8

def os = System.properties['os.name'].toLowerCase()

/*
run {
	workingDir = rootProject.file('assets').path
	setIgnoreExitValue(true)

	if (os.contains('mac')) {
		// Required to run LWJGL3 Java apps on MacOS
		jvmArgs += "-XstartOnFirstThread"
	}
}
*/

jar {
	// sets the name of the .jar file this produces to the name of the game or app.
	//archiveVersion = appName + "-" + version
	// using 'lib' instead of the default 'libs' appears to be needed by jpackageimage.
	destinationDirectory = file("$project.buildDir/libs")
	// the duplicatesStrategy matters starting in Gradle 7.0; this setting works.
	duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
	dependsOn configurations.runtimeClasspath
	from {configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
	from('src/main/java') {
		include '**/*.xml'
	}

	// these "exclude" lines remove some unnecessary duplicate files in the output JAR.
	exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
	dependencies {
		exclude('META-INF/INDEX.LIST', 'META-INF/maven/**')
	}
	// setting the manifest makes the JAR runnable.
	manifest {
		//attributes 'Main-Class': project.mainClassName
		attributes 'Implementation-Title': project.name,
				'Implementation-Version': project.version
	}

	// this last step may help on some OSes that need extra instruction to make runnable JARs.
	doLast {
		file(archiveFile).setExecutable(true, false)
	}
}


/*
if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_14)) {
    jpackageImage.dependsOn jar

    runtime {
        options.set(['--strip-debug',
                     '--compress', '2',
                     '--no-header-files',
                     '--no-man-pages',
                     '--strip-native-commands',
                     '--vm', 'server'])
		// you could very easily need more modules than this one.
		// use the lwjgl3:suggestModules task to see which modules may be needed.
        modules.set([
                'jdk.unsupported'
        ])
        distDir.set(file(buildDir))
        jpackage {
            imageName = appName + version
			// you can set this to false if you want to build an installer, or keep it as true to build just an app.
            skipInstaller = true
			// this may need to be set to a different path if your JAVA_HOME points to a low JDK version.
            jpackageHome = javaHome.getOrElse("")
            mainJar = jar.archiveFileName.get()
            if (os.contains('win')) {
                imageOptions = ["--icon", "icons/logo.ico"]
            } else if (os.contains('nix') || os.contains('nux') || os.contains('bsd')) {
                imageOptions = ["--icon", "icons/logo.png"]
            } else if (os.contains('mac')) {
                imageOptions = ["--icon", "icons/logo.icns", "--java-options", "\"-XstartOnFirstThread\""]
            }
        }
    }

}
*/